// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  activities Activity[]
  activityLogs ActivityLog[]
  excludedIntervals ExcludedInterval[]

  @@map("users")
}

model Activity {
  id          String       @id @default(cuid())
  title       String
  description String?
  frequency   Frequency    @default(DAILY)
  duration    Int?         // Duration in minutes
  category    String?      // Category name
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  activityLogs ActivityLog[]

  @@map("activities")
}

model ActivityLog {
  id          String       @id @default(cuid())
  activityId  String
  startDate   DateTime
  endDate     DateTime
  status      ActivityStatus @default(TODO)
  duration    Int?         // Duration in minutes (copied from activity)
  completedAt DateTime?    // Timestamp when activity was completed
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  comments ActivityLogComment[]

  @@map("activity_logs")
}

model ActivityLogComment {
  id            String      @id @default(cuid())
  activityLogId String
  comment       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  activityLog ActivityLog @relation(fields: [activityLogId], references: [id], onDelete: Cascade)

  @@map("activity_log_comments")
}

model ExcludedInterval {
  id        String   @id @default(cuid())
  userId    String
  frequency Frequency
  type      ExcludedIntervalType
  value     Int      // day of week (0-6) for DAILY, month (1-12) for MONTHLY
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, frequency, type, value])
  @@map("excluded_intervals")
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum ActivityStatus {
  TODO
  IN_PROGRESS
  HOLD
  DONE
}

enum ExcludedIntervalType {
  DAY_OF_WEEK
  WEEK_OF_YEAR
  MONTH
} 